Index: src/tabby/sprite.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from src.tabby.blocks import *\r\nfrom src.tabby import json_project\r\nimport os\r\nimport random\r\nimport string\r\n\r\n__all__ = [\"Sprite\"]\r\n\r\nclass Sprite():\r\n    def __init__(self, name: str,current_costume: int = 0, volume: int = 100, visible: bool = True, position: (int, int) = (0, 0), size: int = 100, direction: int = 90, draggable: bool = False, rotation_style: str = \"all around\"):\r\n        _temp = 1\r\n        for target in json_project[\"targets\"]:\r\n            if not target[\"isStage\"]:\r\n                if target[\"layerOrder\"] > _temp:\r\n                    _temp = target[\"layerOrder\"]\r\n\r\n        self.sprite_num = len(json_project[\"targets\"])\r\n\r\n        json_project[\"targets\"] += [{\r\n            \"isStage\": False,\r\n            \"name\": name,\r\n            \"variables\": [],\r\n            \"lists\": {},\r\n            \"broadcasts\": {},\r\n            \"blocks\": {},\r\n            \"comments\": {},\r\n            \"currentCostume\": current_costume,\r\n            \"costumes\": [],\r\n            \"sounds\": [],\r\n            \"volume\": volume,\r\n            \"layerOrder\": _temp,\r\n            \"visible\": visible,\r\n            \"x\": position[0],\r\n            \"y\": position[1],\r\n            \"size\": size,\r\n            \"direction\": direction,\r\n            \"draggable\": draggable,\r\n            \"rotationStyle\": rotation_style\r\n        }]\r\n    \r\n    #Motion Blocks\r\n    def move(self, steps: float):\r\n        json_project[\"targets\"][self.sprite_num][\"blocks\"][''.join(c for c in (string.digits + string.ascii_letters + string.punctuation) if c not in '\\\\`\"')] = {\r\n\r\n        }\r\n\r\n\r\n    def turn(self, degrees: float):\r\n\r\n        if degrees < 0:\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n        else:\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def go_to(self, position):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def glide_to(self, seconds: float, position):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def point_in_direction(self, degrees: int): #degrees\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def point_towards(self, thing): # position\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_x_by(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_x_to(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_y_by(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_y_to(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def if_on_edge_bounce(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_rotation_style(self, style):\r\n        raise NotImplementedError(\"This method is not available.\")
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tabby/sprite.py b/src/tabby/sprite.py
--- a/src/tabby/sprite.py	(revision a2f5756a14e8af3ddf3854b8807e98790842113d)
+++ b/src/tabby/sprite.py	(date 1745998560095)
@@ -1,11 +1,11 @@
-from src.tabby.blocks import *
 from src.tabby import json_project
-import os
 import random
 import string
 
 __all__ = ["Sprite"]
 
+_random_safe_characters = ''.join(c for c in (string.digits + string.ascii_letters + string.punctuation) if c not in '\\`"')
+
 class Sprite():
     def __init__(self, name: str,current_costume: int = 0, volume: int = 100, visible: bool = True, position: (int, int) = (0, 0), size: int = 100, direction: int = 90, draggable: bool = False, rotation_style: str = "all around"):
         _temp = 1
@@ -39,14 +39,27 @@
         }]
     
     #Motion Blocks
-    def move(self, steps: float):
-        json_project["targets"][self.sprite_num]["blocks"][''.join(c for c in (string.digits + string.ascii_letters + string.punctuation) if c not in '\\`"')] = {
+    def move(self, steps: int):
+        """
+        Moves the sprite forward the number of steps in the direction the sprite is facing.
+
+
+        :param steps:
+        :type steps: int
+        :return:
+        """
+        json_project["targets"][self.sprite_num]["blocks"]["".join(random.choices(_random_safe_characters, k=20))] = {
 
         }
 
 
-    def turn(self, degrees: float):
+    def turn(self, degrees: int):
+        """
+        Turns the sprite (clockwise) the specified amount.
 
+        :param degrees:
+        :return:
+        """
         if degrees < 0:
             raise NotImplementedError("This method is not available.")
 
@@ -81,4 +94,102 @@
         raise NotImplementedError("This method is not available.")
 
     def set_rotation_style(self, style):
+        raise NotImplementedError("This method is not available.")
+
+    # Looks
+    def say(self, text: str, seconds: float = None):
+        raise NotImplementedError("This method is not available.")
+
+    def think(self, text: str, seconds: float = None):
+        raise NotImplementedError("This method is not available.")
+
+    def switch_costume_to(self, costume):
+        raise NotImplementedError("This method is not available.")
+
+    def next_costume(self):
+        raise NotImplementedError("This method is not available.")
+
+    def switch_backdrop_to(self, backdrop: str, wait: bool = False):
+        raise NotImplementedError("This method is not available.")
+
+    def next_backdrop(self):
+        raise NotImplementedError("This method is not available.")
+
+    def change_size_by(self, amount: int):
+        raise NotImplementedError("This method is not available.")
+
+    def set_size_to(self, amount: int):
+        raise NotImplementedError("This method is not available.")
+
+    def change_graphic_effect_by(self, effect, amount: float):
+        if effect not in ["color", "fisheye", "whirl", "pixelate", "mosaic", "brightness", "ghost"]:
+            raise ValueError(f'Invalid value for "effect". Expected "color", "fisheye", "whirl", "pixelate", "mosaic", "brightness" or "ghost"')
+        raise NotImplementedError("This method is not available.")
+
+    def set_graphic_effect_to(self, effect, amount: float):
+        if effect not in ["color", "fisheye", "whirl", "pixelate", "mosaic", "brightness", "ghost"]:
+            raise ValueError(
+                f'Invalid value for "effect". Expected "color", "fisheye", "whirl", "pixelate", "mosaic", "brightness" or "ghost"')
+        raise NotImplementedError("This method is not available.")
+
+    def clear_graphic_effects(self):
+        raise NotImplementedError("This method is not available.")
+
+    def show(self):
+        raise NotImplementedError("This method is not available.")
+
+    def hide(self):
+        raise NotImplementedError("This method is not available.")
+
+    def go_to_layer(self, layer, amount: int = None):
+        raise NotImplementedError("This method is not available.")
+
+    # Sound
+    def play_sound(self, sound, until_done: bool = False):
+        raise NotImplementedError("This method is not available.")
+
+    def stop_all_sounds(self):
+        raise NotImplementedError("This method is not available.")
+
+    def change_sound_effect_by(self, effect, amount: float):
+        raise NotImplementedError("This method is not available.")
+
+    def set_sound_effect_to(self, effect, amount: float):
+        raise NotImplementedError("This method is not available.")
+
+    def clear_all_sound_effects(self):
+        raise NotImplementedError("This method is not available.")
+
+    def change_volume(self):
+        raise NotImplementedError("This method is not available.")
+
+    def set_volume(self):
+        raise NotImplementedError("This method is not available.")
+
+    # Events
+    def when_green_flag_clicked(self, func):
+        def wrapper():
+            raise NotImplementedError("This method is not available.")
+
+    def when_key_pressed(self, func, key):
+        def wrapper():
+            raise NotImplementedError("This method is not available.")
+
+    def when_this_sprite_clicked(self, func):
+        def wrapper():
+            raise NotImplementedError("This method is not available.")
+
+    def when_backdrop_switches_to(self, func, backdrop):
+        def wrapper():
+            raise NotImplementedError("This method is not available.")
+
+    def when_x_is_bigger_then_y(self, func, first, second):
+        def wrapper():
+            raise NotImplementedError("This method is not available.")
+
+    def when_i_recive(self, func, message):
+        def wrapper():
+            raise NotImplementedError("This method is not available.")
+
+    def broudcast(self, message, wait: bool = False):
         raise NotImplementedError("This method is not available.")
\ No newline at end of file
Index: src/tabby/blocks.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nfrom src.tabby import json_project\r\n\r\n\r\nclass MotionBlocks:\r\n    def move(self, steps: float):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def turn(self, degrees: float):\r\n\r\n        if degrees < 0:\r\n            \r\n        else:\r\n            pass\r\n\r\n    def go_to(self, position):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def glide_to(self, seconds: float, position):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def point_in_direction(self, degrees: int): #degrees\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def point_towards(self, thing): # position\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_x_by(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_x_to(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_y_by(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_y_to(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def if_on_edge_bounce(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_rotation_style(self, style):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n\r\nclass LooksBlocks:\r\n    def say(self, text: str, seconds: float = None):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def think(self, text: str, seconds: float = None):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def switch_costume_to(self, costume):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def next_costume(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def switch_backdrop_to(self, backdrop: str, wait: bool = False):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def next_backdrop(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_size_by(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_size_to(self, amount: int):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_effect_by(self, effect, amount: float):\r\n        if effect not in [\"color\", \"fisheye\", \"whirl\", \"pixelate\", \"mosaic\", \"brightness\", \"ghost\"]:\r\n            raise ValueError(f'Invalid value for \"effect\". Expected \"color\", \"fisheye\", \"whirl\", \"pixelate\", \"mosaic\", \"brightness\" or \"ghost\"')\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_effect_to(self, effect, amount: float):\r\n        if effect not in [\"color\", \"fisheye\", \"whirl\", \"pixelate\", \"mosaic\", \"brightness\", \"ghost\"]:\r\n            raise ValueError(\r\n                f'Invalid value for \"effect\". Expected \"color\", \"fisheye\", \"whirl\", \"pixelate\", \"mosaic\", \"brightness\" or \"ghost\"')\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def clear_graphic_effects(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def show(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def hide(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def go_to_layer(self, layer, amount: int = None):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\nclass SoundBlocks:\r\n    def play_sound(self, sound, until_done: bool = False):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def stop_all_sounds(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def change_effect_by(self, effect, amount: float):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_effect_to(self, effect, amount: float):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def clear_all_effects(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n        \r\n    def change_volume(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def set_volume(self):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\nclass EventBlocks:\r\n    def when_green_flag_clicked(self, func):\r\n        def wrapper():\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def when_key_pressed(self, func, key):\r\n        def wrapper():\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def when_this_sprite_clicked(self, func):\r\n        def wrapper():\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def when_backdrop_switches_to(self, func, backdrop):\r\n        def wrapper():\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def when_x_is_bigger_then_y(self, func, first, second):\r\n        def wrapper():\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def when_i_recive(self, func, message):\r\n        def wrapper():\r\n            raise NotImplementedError(\"This method is not available.\")\r\n\r\n    def broudcast(self, message, wait: bool = False):\r\n        raise NotImplementedError(\"This method is not available.\")\r\n\r\nclass ControlBlocks:\r\n    #finnish when i know what to do\r\n    raise NotImplementedError(\"This method is not available.\")\r\n    \r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tabby/blocks.py b/src/tabby/blocks.py
--- a/src/tabby/blocks.py	(revision a2f5756a14e8af3ddf3854b8807e98790842113d)
+++ b/src/tabby/blocks.py	(date 1745998560099)
@@ -9,7 +9,7 @@
     def turn(self, degrees: float):
 
         if degrees < 0:
-            
+            pass
         else:
             pass
 
@@ -143,6 +143,6 @@
         raise NotImplementedError("This method is not available.")
 
 class ControlBlocks:
-    #finnish when i know what to do
+    #finnish when I know what to do
     raise NotImplementedError("This method is not available.")
     
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Tabby-code\r\nprogram scratch with python\r\n\r\n# Installation\r\nnot implemented yet\r\n\r\n# Documentation
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
--- a/README.md	(revision a2f5756a14e8af3ddf3854b8807e98790842113d)
+++ b/README.md	(date 1745994990432)
@@ -4,4 +4,7 @@
 # Installation
 not implemented yet
 
-# Documentation
\ No newline at end of file
+# For other who want to remake
+
+## scratch json formating
+in the scratch json format there are three main items, `""`
\ No newline at end of file
